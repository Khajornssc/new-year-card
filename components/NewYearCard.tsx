import React, { useState, useEffect, useCallback, useRef } from "react";
import {
  Star,
  Sparkles,
  Gift,
  RotateCcw,
  Share2,
  Github,
  Heart,
  Facebook,
  Eye,
} from "lucide-react";
import styles from "./NewYearCard.module.css";
import { database } from "./firebase";
import { ref, onValue, get, set } from "firebase/database";

const NewYearCard = () => {
  // State declarations
  const [isOpen, setIsOpen] = useState(false);
  const [showMessage, setShowMessage] = useState(false);
  const [shareSupported, setShareSupported] = useState(false);
  const [selectedWishes, setSelectedWishes] = useState<string[]>([]);
  const [hasGeneratedWishes, setHasGeneratedWishes] = useState(false);
  const [viewCount, setViewCount] = useState<number | null>(null);
  const audioRef = useRef<HTMLAudioElement>(null);

  // ‡∏¢‡πâ‡∏≤‡∏¢ getRandomWishes ‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  const getRandomWishes = useCallback(() => {
    const availableWishes = [...WISHES_LIST];
    const selectedWishes: string[] = [];
    while (selectedWishes.length < 4) {
      const randomIndex = Math.floor(Math.random() * availableWishes.length);
      selectedWishes.push(availableWishes[randomIndex]);
      availableWishes.splice(randomIndex, 1);
    }
    return selectedWishes;
  }, []);
  const WISHES_LIST = [
    // ‡∏Ñ‡∏≥‡∏≠‡∏ß‡∏¢‡∏û‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ï‡∏•‡∏≠‡∏î‡∏õ‡∏µ 2025",
    "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á ‡∏£‡πà‡∏≥‡∏£‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏á",
    "‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏î‡πâ‡∏≤‡∏ô",
    "‡∏û‡∏ö‡πÄ‡∏à‡∏≠‡πÅ‡∏ï‡πà‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ‡πÜ ‡∏ï‡∏•‡∏≠‡∏î‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà",
    "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏ï‡∏•‡∏≠‡∏î‡∏õ‡∏µ 2025",

    // ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô
    "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô",
    "‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ö‡∏£‡∏∑‡πà‡∏ô ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏á‡πÑ‡∏´‡∏•‡∏°‡∏≤‡πÄ‡∏ó‡∏°‡∏≤",
    "‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô",
    "‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏î‡∏µ‡πÜ ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô",
    "‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô",

    // ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß
    "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç",
    "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç",
    "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á",
    "‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏™‡∏∏‡∏Ç‡∏™‡∏±‡∏ô‡∏ï‡πå ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏¢‡πá‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏∏‡∏Ç",
    "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏±‡∏Å",

    // ‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†
    "‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏°‡∏µ‡∏ä‡∏±‡∏¢ ‡∏£‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏¢‡∏ó‡∏≠‡∏á",
    "‡πÄ‡∏Æ‡∏á‡πÜ ‡∏£‡∏ß‡∏¢‡πÜ ‡∏ï‡∏•‡∏≠‡∏î‡∏õ‡∏µ 2025",
    "‡∏°‡∏µ‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏† ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏á‡πÑ‡∏´‡∏•‡∏°‡∏≤‡πÄ‡∏ó‡∏°‡∏≤",
    "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏£‡πà‡∏≥‡∏£‡∏ß‡∏¢ ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏Ç‡∏≤‡∏î‡∏°‡∏∑‡∏≠",
    "‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ ‡∏°‡∏µ‡∏ä‡∏±‡∏¢ ‡∏£‡πà‡∏≥‡∏£‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏á",

    // ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
    "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á ‡∏õ‡∏£‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏Ñ‡∏†‡∏±‡∏¢",
    "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏£‡∏Ñ‡∏†‡∏±‡∏¢‡∏°‡∏≤‡πÄ‡∏ö‡∏µ‡∏¢‡∏î‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô",
    "‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏à",
    "‡∏°‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ï‡∏•‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ",
    "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á ‡∏≠‡∏≤‡∏¢‡∏∏‡∏¢‡∏∑‡∏ô‡∏¢‡∏≤‡∏ß",

    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    "‡∏™‡∏°‡∏´‡∏ß‡∏±‡∏á‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏£‡∏ñ‡∏ô‡∏≤",
    "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏´‡∏ß‡∏±‡∏á‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à",
    "‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢",
    "‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏≤‡∏£‡∏ñ‡∏ô‡∏≤",
    "‡∏ö‡∏£‡∏£‡∏•‡∏∏‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏î‡πâ‡∏≤‡∏ô",

    // ‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç
    "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏≤‡∏¢ ‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à",
    "‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡∏™‡∏á‡∏ö ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ï‡∏•‡∏≠‡∏î‡∏õ‡∏µ",
    "‡∏°‡∏µ‡∏£‡∏≠‡∏¢‡∏¢‡∏¥‡πâ‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏≤‡∏∞‡πÄ‡∏™‡∏°‡∏≠",
    "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ ‡∏ß‡∏±‡∏ô",
    "‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ",

    // ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡πà‡∏á ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    "‡∏°‡∏µ‡∏™‡∏ï‡∏¥‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡πÅ‡∏´‡∏•‡∏°",
    "‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤ ‡∏™‡∏°‡∏´‡∏ß‡∏±‡∏á‡∏î‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à",
    "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à",
    "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à",

    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤
    "‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
    "‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á",
    "‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡πâ‡∏≤‡∏ß‡∏¢‡πà‡∏≤‡∏á",
    "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏°‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
    "‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡∏£‡∏∏‡πà‡∏á‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ ‡∏î‡πâ‡∏≤‡∏ô",

    // ‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏à
    "‡∏°‡∏µ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏Ç‡πá‡∏á‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ",
    "‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ",
    "‡∏°‡∏µ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ó‡∏∏‡∏Å‡∏™‡∏¥‡πà‡∏á",
    "‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏Ç‡πá‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå",
    "‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏Ç‡πá‡∏á‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ",
  ] as const;
  // Firebase update function
  const updateViewCount = useCallback(async () => {
    try {
      const viewsRef = ref(database, "cardViews");
      const snapshot = await get(viewsRef);
      const currentViews = snapshot.exists() ? snapshot.val() : 0;
      await set(viewsRef, currentViews + 1);
    } catch (error) {
      console.error("Error updating view count:", error);
    }
  }, []);

  // Effects
  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô useEffect
  useEffect(() => {
    if (typeof navigator !== "undefined" && "share" in navigator) {
      setShareSupported(true);
    } else {
      setShareSupported(false); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô setShareSupported
    }
  }, []);

  useEffect(() => {
    if (isOpen && !sessionStorage.getItem("viewUpdated")) {
      updateViewCount().then(() => {
        sessionStorage.setItem("viewUpdated", "true");
      });
    }
  }, [isOpen, updateViewCount]);

  useEffect(() => {
    const viewsRef = ref(database, "cardViews");
    const unsubscribe = onValue(
      viewsRef,
      (snapshot) => {
        const views = snapshot.exists() ? snapshot.val() : 0;
        setViewCount(views);
      },
      (error) => {
        console.error("Error reading view count:", error);
      }
    );
    return () => unsubscribe();
  }, []);

  useEffect(() => {
    if (isOpen && !hasGeneratedWishes) {
      const timer = setTimeout(() => {
        setSelectedWishes(getRandomWishes());
        setShowMessage(true);
        setHasGeneratedWishes(true);

        audioRef.current?.play().catch(() => {
          document.addEventListener("click", () => audioRef.current?.play(), {
            once: true,
          });
        });
      }, 1000);

      return () => clearTimeout(timer);
    } else if (!isOpen) {
      setShowMessage(false);
      if (audioRef.current) {
        audioRef.current.pause();
        audioRef.current.currentTime = 0;
      }
    }
  }, [isOpen, hasGeneratedWishes, getRandomWishes]);

  // Event handlers
  const handleClose = () => {
    setIsOpen(false);
    setShowMessage(false);
    setHasGeneratedWishes(false); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ reset state
  };

  const handleShare = async () => {
    try {
      if (typeof navigator !== "undefined" && "share" in navigator) {
        await navigator.share({
          title: "‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏≠‡∏ß‡∏¢‡∏û‡∏£‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà 2025",
          text: "‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ß‡∏¢‡∏û‡∏£‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà 2025 ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì üéä‚ú®",
          url: window.location.href,
        });
      }
    } catch (error) {
      console.error("Error sharing:", error);
    }
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-purple-600 to-blue-500 p-4">
      <div
        className={`${
          styles.card_inner
        } relative w-96 bg-white rounded-xl shadow-2xl transform transition-all duration-700
          ${isOpen ? "scale-100" : "scale-90 hover:scale-95"} mb-4`}
      >
        {/* Audio Element */}
        <audio
          ref={audioRef}
          src="/happy-new-year.mp3"
          loop
          preload="auto"
          playsInline
        />
        {/* Card Front */}
        <div
          className={`${
            styles.card_front
          } absolute w-full h-full bg-gradient-to-br from-red-500 to-pink-500 rounded-xl p-8
           transform origin-left transition-all duration-700 flex flex-col items-center justify-center
           ${isOpen ? styles.rotate_y_180 : ""}`}
          onClick={() => !isOpen && setIsOpen(true)}
        >
          <Star className="w-16 h-16 text-yellow-300 animate-pulse" />
          <h1 className="text-3xl font-bold text-white mt-4 text-center">
            Happy New Year 2025
          </h1>
          <p className="text-white mt-2 text-center">‚≠ê ‡πÅ‡∏ï‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î ‚≠ê</p>
        </div>

        {/* Card Inside */}
        <div className="p-8">
          <div
            className={`transform transition-all duration-1000 ${
              showMessage
                ? "translate-y-0 opacity-100"
                : "translate-y-10 opacity-0"
            }`}
          >
            <div className="flex justify-between items-center mb-6">
              <Sparkles
                className={`w-12 h-12 text-yellow-500 ${styles.animate_spin_slow}`}
              />
              <div className="flex gap-2">
                {shareSupported && (
                  <button
                    onClick={handleShare}
                    className="p-2 rounded-full hover:bg-gray-100 transition-colors"
                    aria-label="‡πÅ‡∏ä‡∏£‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î"
                  >
                    <Share2 className="w-6 h-6 text-gray-600" />
                  </button>
                )}
                <button
                  onClick={handleClose}
                  className="p-2 rounded-full hover:bg-gray-100 transition-colors"
                  aria-label="‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î"
                >
                  <RotateCcw className="w-6 h-6 text-gray-600" />
                </button>
              </div>
            </div>
            <h2 className="text-2xl font-bold text-center text-gray-800 mb-6">
              ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà 2025 üéä
            </h2>
            <div className="space-y-4">
              {selectedWishes.map((wish, index) => (
                <div
                  key={index}
                  className={`flex items-center space-x-2 ${styles.animate_fade_in}`}
                  style={{ animationDelay: `${index * 0.3}s` }}
                >
                  <Gift className="w-5 h-5 text-red-500 flex-shrink-0" />
                  <p className="text-gray-700">{wish}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
      {/* Footer Information */}
      <div className="flex items-center justify-center space-x-6 mt-4 text-white/80">
        <div className="flex items-center space-x-1">
          <Star className="w-4 h-4 text-yellow-300" />
          <span className="text-sm">New Year Card 2025</span>
        </div>
        <div className="flex items-center space-x-1">
          <Heart className="w-4 h-4 text-red-400" />
          <span className="text-sm">Created by Khajornsak Chaipha</span>
        </div>
        <div className="flex items-center space-x-4">
          <a
            href="https://github.com/Khajornssc/new-year-card"
            target="_blank"
            rel="noopener noreferrer"
            className="flex items-center space-x-1 hover:text-white transition-colors"
          >
            <Github className="w-4 h-4" />
            <span className="text-sm">GitHub</span>
          </a>
          <a
            href="https://www.facebook.com/wartdiy"
            target="_blank"
            rel="noopener noreferrer"
            className="flex items-center space-x-1 hover:text-blue-400 transition-colors"
          >
            <Facebook className="w-4 h-4" />
            <span className="text-sm">Facebook</span>
          </a>
        </div>
        <div className="flex items-center space-x-1">
          <Eye className="w-4 h-4 text-blue-400" />
          <span className="text-sm">
            {viewCount !== null && viewCount >= 0
              ? `${viewCount.toLocaleString()} views`
              : "Loading..."}
          </span>
        </div>
      </div>
    </div>
  );
};

export default NewYearCard;
